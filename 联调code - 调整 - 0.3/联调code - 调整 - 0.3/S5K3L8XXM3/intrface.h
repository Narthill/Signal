// intrface.h
//
// Generated by C DriverWizard 3.2.0 (Build 2485)
// Requires DDK Only
// File created on 6/16/2011
//





#ifndef __INTRFACE_H__
#define __INTRFACE_H__

// Define an Interface Guid for pev100 device class.
// This GUID is used to register (IoRegisterDeviceInterface)
// an instance of an interface so that user application
// can control the pev100 device.
//

//  {6C7D3105-C0F5-4D39-9B2A-795949A12B9A}
// DEFINE_GUID(GUID_DEVINTERFACE_PEV100,
//     0x6C7D3105, 0xC0F5, 0x4D39, 0x9B, 0x2A, 0x79, 0x59, 0x49, 0xA1, 0x2B, 0x9A);
// GUID definition are required to be outside of header inclusion pragma to avoid
// error during precompiled headers.
//

#define FILE_DEVICE_PEV100  0x8000

// Define Interface reference/dereference routines for
// Interfaces exported by IRP_MN_QUERY_INTERFACE

#define PEV100_IOCTL(index) \
	CTL_CODE(FILE_DEVICE_PEV100, index, METHOD_BUFFERED, FILE_READ_DATA)

#define IOCTL_DEV_ID \
	CTL_CODE(FILE_DEVICE_PEV100, 0x800, METHOD_BUFFERED, FILE_READ_ACCESS)
#define IOCTL_ALLOC \
	CTL_CODE(FILE_DEVICE_PEV100, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_GXBUS_RW \
	CTL_CODE(FILE_DEVICE_PEV100, 0x802, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_DMA \
	CTL_CODE(FILE_DEVICE_PEV100, 0x803, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_LOAD \
	CTL_CODE(FILE_DEVICE_PEV100, 0x804, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_NEXT \
	CTL_CODE(FILE_DEVICE_PEV100, 0x805, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_IIC \
	CTL_CODE(FILE_DEVICE_PEV100, 0x806, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_GXBUS_EVENT \
	CTL_CODE(FILE_DEVICE_PEV100, 0x807, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_LOAD_INFO \
	CTL_CODE(FILE_DEVICE_PEV100, 0x808, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_RGB_CORR \
	CTL_CODE(FILE_DEVICE_PEV100, 0x809, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_GAMMA_CORR \
	CTL_CODE(FILE_DEVICE_PEV100, 0x80a, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_DEFECT_CORR \
	CTL_CODE(FILE_DEVICE_PEV100, 0x80b, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SPI \
	CTL_CODE(FILE_DEVICE_PEV100, 0x80c, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_YUV_MFCTR \
	CTL_CODE(FILE_DEVICE_PEV100, 0x80d, METHOD_BUFFERED, FILE_ANY_ACCESS)

// by niezq

/* 可能返回STATUS_PENDING的IRP，使用该错误码代替系统的错误码 */
typedef ULONG	PEV100_ERR;	

#define PEV100_ERR_OK		0x00000000
#define PEV100_ERR_WAIT		0x00000001
#define PEV100_ERR_FAILED	0x00000002
#define PEV100_ERR_BUSY		0x00000003
#define PEV100_ERR_UNKNOW	0x00000004


typedef UINT64 P64;

/* 统一x86,x64下数据结构的size */
#pragma pack(8)

/* IOCTL_ALLOC中使用，分配DMA共享内存 */
typedef struct _DmaMem
{
	UCHAR				NumOfBlocks;// 不高于16个
	ULONG				BlockSize;	// 实际有效值使用28位
	ULONG				ImageSize;	// 最终输出的图像大小(字节)
	//PVOID				t1;
	P64				UsrAddr;	// 返回的用户空间地址
	//PVOID				t2;
	ULONG				OrgSize;	// 原始图像大小(字节)
	USHORT				HSize;		// 水平宽度(像素)
	USHORT				VSize;		// 垂直高度(像素)
	UCHAR				BitwSel;	// 原始图像数据位宽选择:0-8bit,1-10bit,2-12bit
	UCHAR				RawMode;	// RAW模式选择，0-RGGB(平均)，1-GRBG(平均),2-GBRG(平均),3-BGGR(平均),4-RGGB，5-GRBG,6-GBRG,7-BGGR
	UCHAR				YCbCrMode;	// YCbCr模式选择，0-YCbCr,1-YCrCb,2-CbCrY,3-CrCbY
	UCHAR				ChSel;		// 通道选择:0-原始数据，1-RAW转RGB,2-YCbCr转RGB
	UCHAR				MeasEna;	// 统计、测量使能
	UCHAR				MonoEna;	// 单色通道采集使能
}DmaMem,*PDmaMem;

/* 用于IOCTL_LOAD */
typedef struct _BlockLoad
{
	PEV100_ERR	ErrCode;
	//PVOID		t1;
	P64		BlockData;
	//PVOID		t2;
	ULONG		ImageSize;			// 采集到的图像实际数据大小
	BOOLEAN		BlockFrameStart;	// 指示BLOCK中是否包含帧开始
	BOOLEAN		BlockFrameEnd;		// 指示BLOCK中是否包含帧结束
}BlockLoad,*PBlockLoad;

/* 用于IOCTL_LOAD_INFO */
typedef struct _LoadInfo
{
	ULONG		FrameOkCnt; 
	ULONG		FrameErrCnt;
	ULONG		LastFrameSize;
}LoadInfo,*PLoadInfo;

/* 用于IOCTL_GXBUS_RW */
typedef struct _GxBusRW
{
	PEV100_ERR	ErrCode; 
	ULONG		Cmd;	//bit 1:for write,bit 2:for read,bit 7:hardly
	ULONG		Addr;	
	ULONG		Data;
}GxBusRW,*PGxBusRW;

/* 用于IOCTL_IIC */
typedef struct _IICIO
{
	PEV100_ERR	ErrCode;
	UCHAR		RW;
	UCHAR		DevAddr;
	USHORT		RegAddr;
	UCHAR		Data[256];
	USHORT		RegAddrSize;
	USHORT		DataSize;
	ULONG		i2c_n;
	UCHAR		Rapid;
}IICIO,*PIICIO;

/* 用于GxBus Event */
typedef struct _GxBusEvent
{
	PEV100_ERR	ErrCode;
	ULONG		EventCode;
	BOOLEAN		Wait;		
}GxBusEvent,*PGxBusEvent;

/* 用于颜色矩阵控制 */
typedef struct _RgbCorr
{
	BOOLEAN		Enable;
	USHORT		LimR;		// 12位无符号数
	USHORT		LimG;		// 12位无符号数
	USHORT		LimB;		// 12位无符号数
	short		SubR;		// 13位符号数
	short		SubG;		// 13位符号数
	short		SubB;		// 13位符号数
	int			MfctRR;		// 18位符号数
	int			MfctRG;		// 18位符号数
	int			MfctRB;		// 18位符号数
	int			MfctGR;		// 18位符号数
	int			MfctGG;		// 18位符号数
	int			MfctGB;		// 18位符号数
	int			MfctBR;		// 18位符号数
	int			MfctBG;		// 18位符号数
	int			MfctBB;		// 18位符号数
}RgbCorr,*PRgbCorr;

/* 用于YUV转RGB矩阵系数 */
typedef struct _YuvMFctr
{
	short		SubY;		// 13位符号数
	short		SubU;		// 13位符号数
	short		SubV;		// 13位符号数
	int			MfctRY;		// 18位符号数
	int			MfctRU;		// 18位符号数
	int			MfctRV;		// 18位符号数
	int			MfctGY;		// 18位符号数
	int			MfctGU;		// 18位符号数
	int			MfctGV;		// 18位符号数
	int			MfctBY;		// 18位符号数
	int			MfctBU;		// 18位符号数
	int			MfctBV;		// 18位符号数
}YuvMFctr,*PYuvMFctr;

/* 用于Gamma校正 */
typedef struct _GammaCorr
{
	BOOLEAN		Enable;
	ULONG		GammaCurves[19];
}GammaCorr,*PGammaCorr;

/* 用于IOCTL_SPI */
typedef struct _SPIIO
{
	PEV100_ERR		ErrCode;
	BOOLEAN			Reset;
	BOOLEAN			Msb;
	BOOLEAN			Start;
	BOOLEAN			Stop;
	BOOLEAN			Read;
	unsigned char	Num;
	unsigned int	OutData;
	unsigned int	InData;
}SPIIO,*PSPIIO;

#pragma pack()


#endif // __INTRFACE_H__
